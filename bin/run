#!/usr/bin/env node

const http = require('http');

const Sequelize = require('sequelize'); // -- Add sequelize

const config = require('../config')[process.env.NODE_ENV || 'development'];

const log = config.log();
const app = require('../app')(config);


// ------ CONNECTING TO DATABASE ------

// Option 1: Passing a connection URI
// const sequelize = new Sequelize('sqlite::memory:') // Example for sqlite
const sequelize = new Sequelize(config.postgres.database, config.postgres.username, config.postgres.password, {
  host: 'localhost',
  dialect: 'postgres'
});

// ------ OPTION 1: Passing a connection URI. (THIS code works by it's self) ------
// const sequelize = new Sequelize('postgres://sequelize:sequelize@localhost:5432/sequelize') // Example for postgres

// ------ OPTION 2: Option 3: Passing parameters separately (other dialects)
function connectToPostgres() {  // -- Add database connection (Removed async part)
  // const sequelize = new Sequelize(config.postgres.options);  // -- config/index.js
  const sequelize = new Sequelize({
    host: 'localhost',
    dialect: 'postgres'
  }); // -- config/index.js
  // try {
    sequelize.authenticate().then(() => {
      log.info('Connection has been established successfully.');
    }).catch ((error) => {
      log.error('Unable to connect to the database:', error );
    process.exit(1);
  });
  return sequelize;
}

// alternative code
const postgresClient = connectToPostgres();
console.log(postgresClient);
config.postgres.client = postgresClient; 
// config.postgres.client = connectToPostgres(); 




const server = http.createServer(app);

server.listen(process.env.PORT || 3000);

server.on('listening', () => {
  log.info(
    `Hi there! I'm listening on port ${server.address().port} in ${app.get('env')} mode.`,
  );
});
